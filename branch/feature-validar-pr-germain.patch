From 9bad8909521f5d3768b34677f689bd3c1ccf6192 Mon Sep 17 00:00:00 2001
From: Frank Hinojosa <124078849+OliverHz28@users.noreply.github.com>
Date: Sun, 8 Jun 2025 19:03:06 -0500
Subject: [PATCH 01/26] merge[#4]: feature/config-modifier a feature/develop
 (#6)

* feat(json): agregar config.json

* feat(py): crear config_modifier.py para leer archivos .json

* feat(structure): crear .gitignore requirements.txt

* feat(refactor): agregar incrementar_version en config_modifier.py
---
 .gitignore             |  2 ++
 config.json            |  5 +++++
 main.py                |  7 +++++++
 requirements.txt       |  1 +
 src/config_modifier.py | 37 +++++++++++++++++++++++++++++++++++++
 5 files changed, 52 insertions(+)
 create mode 100644 .gitignore
 create mode 100644 config.json
 create mode 100644 main.py
 create mode 100644 requirements.txt

diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3cf8c6d
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,2 @@
+env
+__pycache__
\ No newline at end of file
diff --git a/config.json b/config.json
new file mode 100644
index 0000000..018ae14
--- /dev/null
+++ b/config.json
@@ -0,0 +1,5 @@
+{
+    "version": 2.0,
+    "name": "Proyecto - PC3",
+    "team": "Grupo 6"
+}
\ No newline at end of file
diff --git a/main.py b/main.py
new file mode 100644
index 0000000..fec53dc
--- /dev/null
+++ b/main.py
@@ -0,0 +1,7 @@
+from src.config_modifier import leer_json, incrementar_version
+
+data = leer_json("config.json")
+print(data)
+
+numero_version = incrementar_version("config.json")
+print(f"Nueva versión: {numero_version}")
diff --git a/requirements.txt b/requirements.txt
new file mode 100644
index 0000000..55b033e
--- /dev/null
+++ b/requirements.txt
@@ -0,0 +1 @@
+pytest
\ No newline at end of file
diff --git a/src/config_modifier.py b/src/config_modifier.py
index e69de29..b56b5e7 100644
--- a/src/config_modifier.py
+++ b/src/config_modifier.py
@@ -0,0 +1,37 @@
+import json
+import os
+
+
+def leer_json(file_path):
+    """
+    Lee el archivo JSON desde el sistema de archivos y
+    devuelve su contenido como un diccionario
+    """
+
+    if not os.path.exists(file_path):
+        raise FileNotFoundError(f"No existe el archivo '{file_path}'")
+
+    with open(file_path, 'r', encoding='utf-8') as f:
+        try:
+            return json.load(f)
+        except json.JSONDecodeError:
+            raise ValueError(f"El archivo '{file_path}' no contiene un JSON válido")
+
+
+def incrementar_version(file_path):
+    """
+    Incrementa el campo "version" del archivo JSON
+    """
+
+    config = leer_json(file_path)
+
+    if "version" not in config:
+        raise KeyError("No existe el campo 'version' en el archivo JSON")
+
+    if not isinstance(config['version'], (int, float)):
+        raise TypeError("El campo 'version' no es un número")
+
+    config["version"] += 1
+    with open(file_path, 'w', encoding='utf-8') as f:
+        json.dump(config, f, indent=4)
+    return config["version"]
-- 
2.43.0


From 8472d9c5b6ef78bd92a1d1e5128f27a9fdaf5059 Mon Sep 17 00:00:00 2001
From: Edy <166039525+EdySerrano@users.noreply.github.com>
Date: Sun, 8 Jun 2025 22:06:40 -0500
Subject: [PATCH 02/26] merge[#2]: feature/test a feature/develop  (#7)

* test[#2]: agregando test json_de_prueba en test_config_modifier.py

* test[#2]: agregando test test__leer_json_valido en test_config_modifier.py

* test[#2]: agregando test test_incrementar_version en test_config_modifier.py

* test[#2]: agregando test test_leer_json_invalido en test_config_modifier.py

* test[#2]: agregando test test_incrementar_version_tipo_incorrecto en test_config_modifier.py

---------

Co-authored-by: EdySerrano <edy.serrano.a@uni.pe>
---
 .gitignore                    |  2 +-
 tests/test_config_modifier.py | 44 +++++++++++++++++++++++++++++++++++
 2 files changed, 45 insertions(+), 1 deletion(-)

diff --git a/.gitignore b/.gitignore
index 3cf8c6d..b0b4ebb 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,2 +1,2 @@
-env
+pc3
 __pycache__
\ No newline at end of file
diff --git a/tests/test_config_modifier.py b/tests/test_config_modifier.py
index e69de29..756a899 100644
--- a/tests/test_config_modifier.py
+++ b/tests/test_config_modifier.py
@@ -0,0 +1,44 @@
+# tests/test_config_modifier.py
+
+import pytest
+import json
+import os
+from src.config_modifier import leer_json, incrementar_version
+
+@pytest.fixture
+# Preparamos un archivo temporal para pruebas
+def json_de_prueba(tmp_path):
+    file_path = tmp_path / "config.json"
+    data = {"version": 1.0, "name": "Test App"}
+    with open(file_path, 'w') as f:
+        json.dump(data, f)
+    return file_path
+
+# Preparamos un archivo JSON valido para probar la lectura correcta
+def test_leer_json_valido(json_de_prueba):
+    contenido = leer_json(json_de_prueba)
+    assert contenido["version"] == 1.0
+    assert contenido["name"] == "Test App"
+
+# Preparamos un archivo JSON con el campo 'version' valido para probar el incremento de version
+def test_incrementar_version(json_de_prueba):
+    nueva_version = incrementar_version(json_de_prueba)
+    assert nueva_version == 2.0
+    with open(json_de_prueba) as f:
+        datos = json.load(f)
+    assert datos["version"] == 2.0
+
+#Preparamos un archivo  con contenido invalido (no JSON)
+def test_leer_json_invalido(tmp_path):
+    file_path = tmp_path / "invalido.json"
+    file_path.write_text("esto no es json")
+    with pytest.raises(ValueError):
+        leer_json(file_path)
+
+# Preparamos un archivo JSON con campo 'version' de tipo incorrecto
+def test_incrementar_version_tipo_incorrecto(tmp_path):
+    file_path = tmp_path / "version_invalida.json"
+    with open(file_path, 'w') as f:
+        json.dump({"version": "uno"}, f)
+    with pytest.raises(TypeError):
+        incrementar_version(file_path)
\ No newline at end of file
-- 
2.43.0


From c19091e1fffb0d272a608fdd8b49751312f92d81 Mon Sep 17 00:00:00 2001
From: Edy <166039525+EdySerrano@users.noreply.github.com>
Date: Mon, 9 Jun 2025 00:07:33 -0500
Subject: [PATCH 03/26] merge[#3]: feature/workflow a feature/develop (#9)

---
 .github/workflows/pr_validation.yaml | 19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/.github/workflows/pr_validation.yaml b/.github/workflows/pr_validation.yaml
index e69de29..68f6206 100644
--- a/.github/workflows/pr_validation.yaml
+++ b/.github/workflows/pr_validation.yaml
@@ -0,0 +1,19 @@
+name: PR Validation  
+
+on:
+  push:              
+  pull_request:     
+
+jobs:
+  placeholder:
+    runs-on: ubuntu-latest   
+
+    steps:
+      - name: Paso de ejemplo (Placeholder)  # el job placeholder es uno vacio
+        run: echo "Workflow placeholder"
+
+      # Aqui se pueden agregar pasos siguientes, como:
+      # - Validacion de formato de codigo (linter)
+      # - Ejecucion de pruebas unitarias
+      # - Validacion de la construccion del proyecto (build)
+  
-- 
2.43.0


From 3032b75efa1968e148f5e5d9099a81425e89ae84 Mon Sep 17 00:00:00 2001
From: GermainAN <germainchoquechambi5@gmail.com>
Date: Mon, 9 Jun 2025 00:16:51 -0500
Subject: [PATCH 04/26]  merge[#8]: feature/lint-hook a feature/develop (#10)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* feat[#5]: agregar script para validar codigo Python con flake8

* feat[#5]: añadir validacion de scripts bash con shellcheck

* feat[#5]:: añadir validacion con tflint para IaC

* feat[#8]: implementar hook para validar el formato del mensaje del commit

* feat[#8]: implementar hook pre-push para prevenir push con errores
---
 hooks/commit-msg    | 16 ++++++++++++++++
 hooks/pre-push      | 13 +++++++++++++
 requirements.txt    |  3 ++-
 scripts/lint_all.sh | 44 ++++++++++++++++++++++++++++++++++++++++++++
 4 files changed, 75 insertions(+), 1 deletion(-)
 create mode 100644 hooks/commit-msg
 create mode 100644 hooks/pre-push
 mode change 100644 => 100755 scripts/lint_all.sh

diff --git a/hooks/commit-msg b/hooks/commit-msg
new file mode 100644
index 0000000..9b53516
--- /dev/null
+++ b/hooks/commit-msg
@@ -0,0 +1,16 @@
+#!/bin/bash
+
+commit_message=$(cat "$1")
+
+commit_tipo1='^[A-Z]{3,5}-[0-9]+: .+'
+commit_tipo2='^(feat|fix|docs|style|refactor|perf|test|chore)(\([a-z0-9\-]+\))?: .+'
+
+
+if ! [[ "$commit_message" =~ $commit_tipo1 || "$commit_message" =~ $commit_tipo2 ]]; then
+    echo "El mensaje de commit no cumple con el formato requerido"
+    echo "commits validos"
+    echo "PROY-123: descripcion"
+    echo "tipo[#]: descripcion clara"
+    echo "tipos: feat, fix, docs, style, refactor, perf, test, chore"
+    exit 1
+fi
\ No newline at end of file
diff --git a/hooks/pre-push b/hooks/pre-push
new file mode 100644
index 0000000..90ffd24
--- /dev/null
+++ b/hooks/pre-push
@@ -0,0 +1,13 @@
+#!/bin/bash
+
+echo "Ejecutando lint_all.sh antes del push"
+echo "*************************************"
+echo "*************************************"
+
+if ! ./scripts/lint_all.sh; then
+  echo "*************************************"
+  echo "*************************************"
+  echo "hubo un error al ejecutar el ./scripts/lint_all.sh"
+  echo "push cancelado"
+  exit 1
+fi
\ No newline at end of file
diff --git a/requirements.txt b/requirements.txt
index 55b033e..036d8c5 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1 +1,2 @@
-pytest
\ No newline at end of file
+pytest
+flake8
\ No newline at end of file
diff --git a/scripts/lint_all.sh b/scripts/lint_all.sh
old mode 100644
new mode 100755
index f1f641a..2b860f8
--- a/scripts/lint_all.sh
+++ b/scripts/lint_all.sh
@@ -1 +1,45 @@
 #!/usr/bin/env bash
+
+cd "$(dirname "$0")/.." || exit
+
+errores=0 
+
+echo "Ejecutando flake8"
+if flake8 src/ tests/ ./*.py --max-line-length=88 --select=E,W,F; then
+  echo "No se encontraron errores con flake8"
+else
+  echo "flake8 encontro errores"
+  errores=1
+fi
+
+echo "*********************"
+echo "Ejecutando shellcheck"
+if shellcheck scripts/* hooks/*; then 
+  echo "No se encontraron errores con shellcheck"
+else
+  echo "shellcheck encontro errores"
+  errores=1
+fi
+
+echo "*********************"
+echo "Ejecutando tflint"
+if [ -d "iac" ]; then
+  if tflint --enable-all iac/; then
+    echo "No se encontraron errores con tflint"
+  else
+    echo "tflint encontro errores"
+    errores=1
+  fi
+else
+  echo "No se encontro el directorio de IaC"
+fi
+
+echo "*********************"
+echo "Resultado Final:"
+if [ $errores -eq 1 ]; then
+  echo "Se encontraron errores"
+  exit 1
+else
+  echo "Todos los lint pasaron correctamente"
+  exit 0
+fi
\ No newline at end of file
-- 
2.43.0


From 5864808521617bdde65155a8dcf318cdd8b6d439 Mon Sep 17 00:00:00 2001
From: Edy <166039525+EdySerrano@users.noreply.github.com>
Date: Wed, 11 Jun 2025 10:01:15 -0500
Subject: [PATCH 05/26] merge[#2]: feature/tests  (#11)

* test[#2]: agregando test json_de_prueba en test_config_modifier.py

* test[#2]: agregando test test__leer_json_valido en test_config_modifier.py

* test[#2]: agregando test test_incrementar_version en test_config_modifier.py

* test[#2]: agregando test test_leer_json_invalido en test_config_modifier.py

* test[#2]: agregando test test_incrementar_version_tipo_incorrecto en test_config_modifier.py

* Actualizacion de test_config_modifier.py

Ocurrio un problema con el pytest y windows pero ya se soluciono

---------

Co-authored-by: edysaul20000 <edysaulserrano@gmail.com>
---
 tests/test_config_modifier.py | 7 +++++--
 1 file changed, 5 insertions(+), 2 deletions(-)

diff --git a/tests/test_config_modifier.py b/tests/test_config_modifier.py
index 756a899..7af5bb2 100644
--- a/tests/test_config_modifier.py
+++ b/tests/test_config_modifier.py
@@ -2,8 +2,11 @@
 
 import pytest
 import json
+import sys
 import os
-from src.config_modifier import leer_json, incrementar_version
+sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))
+
+from config_modifier import leer_json, incrementar_version
 
 @pytest.fixture
 # Preparamos un archivo temporal para pruebas
@@ -41,4 +44,4 @@ def test_incrementar_version_tipo_incorrecto(tmp_path):
     with open(file_path, 'w') as f:
         json.dump({"version": "uno"}, f)
     with pytest.raises(TypeError):
-        incrementar_version(file_path)
\ No newline at end of file
+        incrementar_version(file_path)
-- 
2.43.0


From 32fc4ad8d0d489790ec032ca6353e7e8c820bb48 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 11:29:14 -0500
Subject: [PATCH 06/26] feat[#15]: validar el titulo de la PR

---
 scripts/check_pr.py | 22 ++++++++++++++++++++++
 1 file changed, 22 insertions(+)
 create mode 100644 scripts/check_pr.py

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
new file mode 100644
index 0000000..335541c
--- /dev/null
+++ b/scripts/check_pr.py
@@ -0,0 +1,22 @@
+import os
+import re
+from typing import Tuple
+
+
+def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
+    pr_id = os.path.basename(carpeta_pr)
+    archivo_titulo = os.path.join(carpeta_pr, f"pr_{pr_id}_title.txt")
+
+    if not os.path.isfile(archivo_titulo):
+        return False, f"FAIL: Falta el archivo {archivo_titulo}"
+
+    titulo = open(archivo_titulo, encoding="utf-8").read().strip()
+
+    if not titulo:
+        return False, f"FAIL: El archivo {archivo_titulo} esta vacio"
+
+    patron = re.compile(r"^[A-Z]{2,5}-\d+: .+")
+    if patron.match(titulo):
+        return True, "OK"
+
+    return False, f"FAIL: '{titulo}' no cumple con el formato requerido"
\ No newline at end of file
-- 
2.43.0


From b70843a80d3e6d79349ad97d6feb53cbcdcb2ffb Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 12:45:12 -0500
Subject: [PATCH 07/26] feat[#16]: verificar que CHANGELOG contenga seccion ##
 PR id

---
 scripts/check_pr.py | 18 +++++++++++++++++-
 1 file changed, 17 insertions(+), 1 deletion(-)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index 335541c..643e619 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -19,4 +19,20 @@ def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
     if patron.match(titulo):
         return True, "OK"
 
-    return False, f"FAIL: '{titulo}' no cumple con el formato requerido"
\ No newline at end of file
+    return False, f"FAIL: '{titulo}' no cumple con el formato requerido"
+
+
+def verificiar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
+
+    archivo_changelog = "../CHANGELOG.md"
+
+    if not os.path.isfile(archivo_changelog):
+        return False, "FAIL: no existe CHANGELOG.md"
+
+    contenido = open(archivo_changelog, encoding="utf-8").read()
+    seccion_pr = f"## PR {os.path.basename(carpeta_pr)}"
+
+    if seccion_pr in contenido:
+        return True, "OK"
+
+    return False, f"FAIL: No se encontro la seccion '{seccion_pr}'"
-- 
2.43.0


From 95f42deb1eb6fda202caf0b34ba3907a067a59ff Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 17:35:36 -0500
Subject: [PATCH 08/26] feat[#17]: validar formato de commits en archivo
 commits.txt

---
 scripts/check_pr.py | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index 643e619..ce0015a 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -1,6 +1,6 @@
 import os
 import re
-from typing import Tuple
+from typing import Tuple, List
 
 
 def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
@@ -36,3 +36,18 @@ def verificiar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
         return True, "OK"
 
     return False, f"FAIL: No se encontro la seccion '{seccion_pr}'"
+
+
+def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
+    archivo_commits = os.path.join(carpeta_pr, "commits.txt")
+    if not os.path.isfile(archivo_commits):
+        return False, ["no existe el archivo commits.txt"]
+
+    incorrectos: List[str] = []
+    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore)\[#\d+\]: .+")
+
+    for fila, commit in enumerate(open(archivo_commits, encoding="utf-8"), 1):
+        if not patron.match(commit.strip()):
+            incorrectos.append(f"fila {fila}: '{commit.strip()}'")
+
+    return (len(incorrectos) == 0, incorrectos)
-- 
2.43.0


From 793cc38c22ea221029a02abd35ef951c3f27af79 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 20:34:15 -0500
Subject: [PATCH 09/26] =?UTF-8?q?feat[#18]:=20A=C3=B1adir=20funcion=20que?=
 =?UTF-8?q?=20ejecuta=20linters?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 scripts/check_pr.py | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index ce0015a..b64c326 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -1,5 +1,6 @@
 import os
 import re
+import subprocess
 from typing import Tuple, List
 
 
@@ -51,3 +52,17 @@ def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
             incorrectos.append(f"fila {fila}: '{commit.strip()}'")
 
     return (len(incorrectos) == 0, incorrectos)
+
+
+def ejecutar_lint() -> Tuple[bool, str]:
+    try:
+        resultado = subprocess.run(
+            ["bash", "lint_all.sh"],
+            capture_output=True,
+            text=True)
+        if resultado.returncode == 0:
+            return True, resultado.stdout.strip()
+        else:
+            return False, resultado.stderr.strip() or resultado.stdout.strip()
+    except FileNotFoundError:
+        return False, "no existe el script lint_all.sh"
-- 
2.43.0


From 2723f2e84fe159bcaf2689d79c31f110ebd6a8ae Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 20:42:23 -0500
Subject: [PATCH 10/26] =?UTF-8?q?test[#18]:=20a=C3=B1adir=20funcion=20para?=
 =?UTF-8?q?=20ejecutar=20pruebas=20con=20pytest?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

---
 scripts/check_pr.py | 15 +++++++++++++++
 1 file changed, 15 insertions(+)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index b64c326..b5eb83d 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -66,3 +66,18 @@ def ejecutar_lint() -> Tuple[bool, str]:
             return False, resultado.stderr.strip() or resultado.stdout.strip()
     except FileNotFoundError:
         return False, "no existe el script lint_all.sh"
+
+
+def ejecutar_tests() -> Tuple[bool, str]:
+    try:
+        resultado = subprocess.run(
+            ["pytest", "--maxfail=1", "--disable-warnings", "-q"],
+            capture_output=True,
+            text=True
+        )
+        if resultado.returncode == 0:
+            return True, resultado.stdout.strip()
+        else:
+            return False, resultado.stdout.strip() + "\n" + resultado.stderr.strip()
+    except FileNotFoundError:
+        return False, "No se encontro pytest"
-- 
2.43.0


From 5f178a20293d44f76971f60dbae57cebcbb1708f Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 21:10:10 -0500
Subject: [PATCH 11/26] feat[#18]: generar reporte de validacion en
 pr_simulation/<id>/pr_report.md

---
 scripts/check_pr.py | 27 +++++++++++++++++++++++++++
 1 file changed, 27 insertions(+)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index b5eb83d..f446a7a 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -81,3 +81,30 @@ def ejecutar_tests() -> Tuple[bool, str]:
             return False, resultado.stdout.strip() + "\n" + resultado.stderr.strip()
     except FileNotFoundError:
         return False, "No se encontro pytest"
+
+
+def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
+    with open(ruta_report, "w", encoding="utf-8") as f:
+        f.write("# Informe de Validacion\n\n")
+        f.write("## Titulo\n")
+        f.write(f"{'OK' if titulo[0] else 'FAIL'}: {titulo[1]}\n\n")
+
+        f.write("## Changelog\n")
+        f.write(f"{'OK' if changelog[0] else 'FAIL'}: {changelog[1]}\n\n")
+
+        f.write("## Commits\n")
+        if commits[0]:
+            f.write("OK: Todos los commits son validos\n\n")
+        else:
+            f.write("FAIL: Commits con errores de formato:\n")
+            for error in commits[1]:
+                f.write(f"- {error}\n")
+            f.write("\n")
+
+        f.write("## Lint\n")
+        f.write(f"{'OK' if lint[0] else 'FAIL'}\n")
+        f.write(f"```\n{lint[1]}\n```\n\n")
+
+        f.write("## Tests\n")
+        f.write(f"{'OK' if tests[0] else 'FAIL'}\n")
+        f.write(f"```\n{tests[1]}\n```\n")
-- 
2.43.0


From 7530e407227ce49026a04c0ba8ab2ad810749708 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Sun, 15 Jun 2025 21:32:24 -0500
Subject: [PATCH 12/26] feat[#18]: generar reportes de validacion en
 pr_report.md y se documento las funciones

---
 scripts/check_pr.py | 38 ++++++++++++++++++++++++++++++++++++++
 1 file changed, 38 insertions(+)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index f446a7a..615a5ff 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -1,9 +1,12 @@
 import os
 import re
+import sys
 import subprocess
 from typing import Tuple, List
 
 
+# Valida el titulo del Pull Request verificando que el archivo correspondiente exista
+# y que cumpla con el patron esperado
 def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
     pr_id = os.path.basename(carpeta_pr)
     archivo_titulo = os.path.join(carpeta_pr, f"pr_{pr_id}_title.txt")
@@ -23,6 +26,7 @@ def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
     return False, f"FAIL: '{titulo}' no cumple con el formato requerido"
 
 
+# Verifica que el archivo CHANGELOG.md contenga una seccion para el PR actual
 def verificiar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
 
     archivo_changelog = "../CHANGELOG.md"
@@ -39,6 +43,7 @@ def verificiar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
     return False, f"FAIL: No se encontro la seccion '{seccion_pr}'"
 
 
+# Verifica que todos los commits en commits.txt sigan un patron
 def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
     archivo_commits = os.path.join(carpeta_pr, "commits.txt")
     if not os.path.isfile(archivo_commits):
@@ -54,6 +59,7 @@ def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
     return (len(incorrectos) == 0, incorrectos)
 
 
+# Ejecuta el script lint_all.sh para validar la calidad del codigo
 def ejecutar_lint() -> Tuple[bool, str]:
     try:
         resultado = subprocess.run(
@@ -68,6 +74,7 @@ def ejecutar_lint() -> Tuple[bool, str]:
         return False, "no existe el script lint_all.sh"
 
 
+# ejecuta los tests usando pytest y devuelve el resultado
 def ejecutar_tests() -> Tuple[bool, str]:
     try:
         resultado = subprocess.run(
@@ -83,6 +90,7 @@ def ejecutar_tests() -> Tuple[bool, str]:
         return False, "No se encontro pytest"
 
 
+# Genera el reporte de validacion del PR en formato Markdown
 def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
     with open(ruta_report, "w", encoding="utf-8") as f:
         f.write("# Informe de Validacion\n\n")
@@ -108,3 +116,33 @@ def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
         f.write("## Tests\n")
         f.write(f"{'OK' if tests[0] else 'FAIL'}\n")
         f.write(f"```\n{tests[1]}\n```\n")
+
+
+ruta_base = "../pr_simulation"
+if not os.path.isdir(ruta_base):
+    print("No existe la carpeta pr_simulation")
+    sys.exit(1)
+# iteramos sobre cada carpeta de PR y lo valida
+for nombre_carpeta in sorted(os.listdir(ruta_base)):
+    ruta_pr = os.path.join(ruta_base, nombre_carpeta)
+    if not os.path.isdir(ruta_pr):
+        continue
+
+    print(f"\nValidando PR {nombre_carpeta}")
+
+    titulo = validar_titulo(ruta_pr)
+    changelog = verificiar_changelog(ruta_pr)
+    commits = validar_commits(ruta_pr)
+    lint = ejecutar_lint()
+    tests = ejecutar_tests()
+
+    generar_pr_repor(
+        os.path.join(ruta_pr, "pr_report.md"),
+        titulo,
+        changelog,
+        commits,
+        lint,
+        tests
+    )
+# indica donde se guardo el pr_report.md
+    print("pr_report.md generado en:", os.path.join(ruta_pr, "pr_report.md"))
-- 
2.43.0


From b4ea96328230edbf488f29ee6acdcd9489ae763c Mon Sep 17 00:00:00 2001
From: OliverHz28 <oliver_28z@hotmail.com>
Date: Sun, 15 Jun 2025 23:50:18 -0500
Subject: [PATCH 13/26] feat[#22]: agregar pytest.ini para la configuracion de
 tests

---
 hooks/commit-msg | 2 +-
 pytest.ini       | 6 ++++++
 2 files changed, 7 insertions(+), 1 deletion(-)
 create mode 100644 pytest.ini

diff --git a/hooks/commit-msg b/hooks/commit-msg
index 9b53516..4e511f7 100644
--- a/hooks/commit-msg
+++ b/hooks/commit-msg
@@ -3,7 +3,7 @@
 commit_message=$(cat "$1")
 
 commit_tipo1='^[A-Z]{3,5}-[0-9]+: .+'
-commit_tipo2='^(feat|fix|docs|style|refactor|perf|test|chore)(\([a-z0-9\-]+\))?: .+'
+commit_tipo2='^(feat|fix|docs|style|refactor|perf|test|chore)\[#?[0-9]+\]: .+'
 
 
 if ! [[ "$commit_message" =~ $commit_tipo1 || "$commit_message" =~ $commit_tipo2 ]]; then
diff --git a/pytest.ini b/pytest.ini
new file mode 100644
index 0000000..79510be
--- /dev/null
+++ b/pytest.ini
@@ -0,0 +1,6 @@
+[pytest]
+minversion = 8.0
+# addopts = -ra -q
+testpaths =
+    tests
+pythonpath = .
\ No newline at end of file
-- 
2.43.0


From 5481f6a91ff917f13d5060d6e15cbadfe6d29688 Mon Sep 17 00:00:00 2001
From: OliverHz28 <oliver_28z@hotmail.com>
Date: Sun, 15 Jun 2025 23:54:29 -0500
Subject: [PATCH 14/26] refactor[#22]: corregir lint_all.sh

---
 scripts/lint_all.sh | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/scripts/lint_all.sh b/scripts/lint_all.sh
index 2b860f8..845f6ee 100755
--- a/scripts/lint_all.sh
+++ b/scripts/lint_all.sh
@@ -5,7 +5,7 @@ cd "$(dirname "$0")/.." || exit
 errores=0 
 
 echo "Ejecutando flake8"
-if flake8 src/ tests/ ./*.py --max-line-length=88 --select=E,W,F; then
+if flake8 src/ tests/ --max-line-length=88 --select=E,W,F; then
   echo "No se encontraron errores con flake8"
 else
   echo "flake8 encontro errores"
-- 
2.43.0


From 61e7ab4028d41890ad875820bb7c7774ae92b04f Mon Sep 17 00:00:00 2001
From: OliverHz28 <oliver_28z@hotmail.com>
Date: Sun, 15 Jun 2025 23:59:42 -0500
Subject: [PATCH 15/26] refactor[#22]: agregar __main__ en config_modifier.py y
 optimizar los tests

---
 main.py                       |  7 -------
 src/config_modifier.py        | 12 ++++++++++++
 tests/test_config_modifier.py | 17 ++++++++++-------
 3 files changed, 22 insertions(+), 14 deletions(-)
 delete mode 100644 main.py

diff --git a/main.py b/main.py
deleted file mode 100644
index fec53dc..0000000
--- a/main.py
+++ /dev/null
@@ -1,7 +0,0 @@
-from src.config_modifier import leer_json, incrementar_version
-
-data = leer_json("config.json")
-print(data)
-
-numero_version = incrementar_version("config.json")
-print(f"Nueva versión: {numero_version}")
diff --git a/src/config_modifier.py b/src/config_modifier.py
index b56b5e7..0d7dbf0 100644
--- a/src/config_modifier.py
+++ b/src/config_modifier.py
@@ -35,3 +35,15 @@ def incrementar_version(file_path):
     with open(file_path, 'w', encoding='utf-8') as f:
         json.dump(config, f, indent=4)
     return config["version"]
+
+
+if __name__ == "__main__":
+
+    file_path = "config.json"
+    try:
+        data = leer_json(file_path)
+        print(f"Contenido del archivo '{file_path}': {data}")
+        nueva_version = incrementar_version(file_path)
+        print(f"Versión actualizada correctamente a: {nueva_version}")
+    except Exception as e:
+        print(f"Error: {e}")
diff --git a/tests/test_config_modifier.py b/tests/test_config_modifier.py
index 7af5bb2..c20fafb 100644
--- a/tests/test_config_modifier.py
+++ b/tests/test_config_modifier.py
@@ -2,14 +2,12 @@
 
 import pytest
 import json
-import sys
-import os
-sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', 'src')))
+from src.config_modifier import leer_json, incrementar_version
 
-from config_modifier import leer_json, incrementar_version
 
 @pytest.fixture
-# Preparamos un archivo temporal para pruebas
+# Preparamos un archivo
+# temporal para pruebas
 def json_de_prueba(tmp_path):
     file_path = tmp_path / "config.json"
     data = {"version": 1.0, "name": "Test App"}
@@ -17,13 +15,16 @@ def json_de_prueba(tmp_path):
         json.dump(data, f)
     return file_path
 
+
 # Preparamos un archivo JSON valido para probar la lectura correcta
 def test_leer_json_valido(json_de_prueba):
     contenido = leer_json(json_de_prueba)
     assert contenido["version"] == 1.0
     assert contenido["name"] == "Test App"
 
-# Preparamos un archivo JSON con el campo 'version' valido para probar el incremento de version
+
+# Preparamos un archivo JSON con el campo 'version'
+# valido para probar el incremento de version
 def test_incrementar_version(json_de_prueba):
     nueva_version = incrementar_version(json_de_prueba)
     assert nueva_version == 2.0
@@ -31,13 +32,15 @@ def test_incrementar_version(json_de_prueba):
         datos = json.load(f)
     assert datos["version"] == 2.0
 
-#Preparamos un archivo  con contenido invalido (no JSON)
+
+# Preparamos un archivo  con contenido invalido (no JSON)
 def test_leer_json_invalido(tmp_path):
     file_path = tmp_path / "invalido.json"
     file_path.write_text("esto no es json")
     with pytest.raises(ValueError):
         leer_json(file_path)
 
+
 # Preparamos un archivo JSON con campo 'version' de tipo incorrecto
 def test_incrementar_version_tipo_incorrecto(tmp_path):
     file_path = tmp_path / "version_invalida.json"
-- 
2.43.0


From 2774da6ef9715191bf3562595841775b9452a99d Mon Sep 17 00:00:00 2001
From: OliverHz28 <oliver_28z@hotmail.com>
Date: Mon, 16 Jun 2025 00:01:00 -0500
Subject: [PATCH 16/26] docs[#22]: actualizar README con guias de uso completas

---
 README.md | 213 +++++++++++++++++++++++++++++++++++++++++++++++++++++-
 1 file changed, 209 insertions(+), 4 deletions(-)

diff --git a/README.md b/README.md
index c2097b0..465af9b 100644
--- a/README.md
+++ b/README.md
@@ -2,8 +2,213 @@
 
 ## Team
 
-| Miembro del Equipo | Repositorio Principal |
+| Miembro del Equipo | Codigo |
 | :----------------- | :-------------------- | 
-| **Choquecambi Germain** |  |
-| **Serrano Edy** | | 
-| **Hinojosa Frank** |   | 
\ No newline at end of file
+| **Choquecambi Germain** | `20211360A` |
+| **Serrano Edy** | `20211229B` | 
+| **Hinojosa Frank** | `20210345I`  | 
+
+## Descripcion
+
+**Proyecto 10 - Grupo 6**, enfocado en simular un flujo Pull Request completo y la revisión de código automatizada usando:
+
+- Git hooks
+- Linters y análisis estático
+- Scripts Python
+- Simulación de merge
+- Integración con GitHub Actions (act)
+
+El avance se ha divido en 3 Sprints.
+
+## Sprint 1
+
+Realizado del 7 al 9 de junio de 2025, se compone de los siguiente:
+
+### 1. Ramas
+
+- `feature/tests`, desarrollado por **Edy Serrano** 
+- `feature/hooks-testing`, desarrollado por **Germain Choquechambi** 
+- `feature/lint-hooks`, desarrollado por **Germain Choquechambi** 
+- `feature/workflows`, desarrollado por **Edy Serrano** 
+- `feature/config-modifier`, desarrollado por **Frank Hinojosa** 
+
+### 2. Isues
+
+- [#2](#2-pruebas-automatizadas) Pruebas automatizadas
+- [#3](#3-crear-workflow) Crear workflow 
+- [#4](#4-crear-script-config_modifierpy) Crear script config_modifier.py
+- [#5](#5-verificacion-calidad-de-codigo-python) Verificacion calidad de Codigo Python
+- [#8](#8-validacion-y-control-de-calidad-con-hooks-commit-msg-y-pre-push) Validacion y control de calidad con hooks commit-msg y pre-push
+
+### 3. Pull Request
+
+- [#6](https://github.com/OliverHz28/PC3Proyecto10/pull/6) : merge[#4](#4-crear-script-config_modifierpy): feature/config-modifier a feature/develop 
+- [#7](https://github.com/OliverHz28/PC3Proyecto10/pull/7) : merge[#2](#2-pruebas-automatizadas): feature/test a feature/develop
+- [#9](https://github.com/OliverHz28/PC3Proyecto10/pull/9) : merge[#3](#3-crear-workflow) : feature/workflow a feature/develop
+- [#10](https://github.com/OliverHz28/PC3Proyecto10/pull/10) : [#8](#8-validacion-y-control-de-calidad-con-hooks-commit-msg-y-pre-push) y [#5](#5-verificacion-calidad-de-codigo-python) : Feature/lint hooks
+
+
+## Objetivos
+
+- Crear la estructura inicial:
+
+  * Carpeta `scripts/` con:
+    * `lint_all.sh` que ejecute:
+
+      * `flake8 src/ --max-line-length=88 --select=E,W,F`
+      * `shellcheck scripts/*.sh`
+      * `tflint --enable-all iac/` (si existe carpeta `iac/`, sino mostrar mensaje de "No IaC").
+    * Hook `commit-msg` en `.git/hooks/` que valide patrón `^[A-Z]{3,5}-\d+: .+`.
+    * Hook `pre-push` en `.git/hooks/` que llame a `lint_all.sh` y bloquee si hay errores.
+  * Carpeta `src/` con un script Python `config_modifier.py` que:
+
+    * Lea un JSON `config.json` y modifique un campo específico (por ejemplo, incremente "version").
+  * Carpeta `tests/` con al menos 2 pruebas pytest para `config_modifier.py`.
+  * Carpeta `.github/workflows/` con archivo `pr_validation.yaml` esqueleto que contenga jobs vacíos.
+  * Carpeta `pr_simulation/` vacía.
+
+* Ejecutar `lint_all.sh` localmente y corregir errores encontrados.
+
+## Demostracion en video
+
+[Sprint 1 (Dia 3: 9/06/2025) Grupo 6 Proyecto 10 ](https://www.youtube.com/watch?v=ZwcuikAZ56w&ab_channel=SerranoArosteguiEdySaul)
+
+## Distribución
+
+- **Edy Serrano**: Issues [#2](#2-pruebas-automatizadas), [#3](#3-crear-workflow)
+- **Frank Hinojosa**: Issues [#4](#4-crear-script-config_modifierpy)
+- **Germain Choquecambi**: [#5](#5-verificacion-calidad-de-codigo-python), [#8](#8-validacion-y-control-de-calidad-con-hooks-commit-msg-y-pre-push)
+
+## Issues del Sprint 1
+
+### [#2](https://github.com/OliverHz28/PC3Proyecto10/issues/2) Pruebas automatizadas
+- **User story**  
+    **As a** _desarrollador_  
+    **I need** _pruebas automatizadas para asegurar el funcionamiento correcto del sistema_  
+    **So that** _puedo garantizar que las funcionalidades principales operan correctamente y detectar errores de manera temprana_
+- **Responsable**: Edy Serrano
+- **Rama**: `feature/tests`
+- **Objetivo**: Garantizar que las funcionalidades principales operan correctamente y detectar errores de manera temprana
+
+### [#3](https://github.com/OliverHz28/PC3Proyecto10/issues/3) Crear workflow 
+- **User story**  
+    **As a** _desarrollador_  
+    **I need** _un workflow skeleton pr_validation.yaml para preparar la automatización de validaciones_  
+    **So that** _el proyecto este listo para implementar validaciones automaticas en los flujos de desarrollo (push y pull request)_
+- **Responsable**: Edy Serrano
+- **Rama**: `feature/workflows`
+- **Objetivo**: Preparar el skeleton pr_validation.yaml que contenga jobs vacíos.
+
+### [#4](https://github.com/OliverHz28/PC3Proyecto10/issues/4) Crear script config_modifier.py
+- **User story**  
+    **As a** _desarrollador_  
+    **I need** _un script `config_modifier.py` que modifique archivos JSON_  
+    **So that** _pueda automatizar cambios de configuración en los proyectos de forma rapida y segura_ 
+- **Responsable**: Frank Hinojosa
+- **Rama**: `feature/config-modifier`
+- **Objetivo**: Crear `config_modifier.py` con funciones que lea un JSON config.json y modifique un campo específico como incrementar la `version`
+
+### [#5](https://github.com/OliverHz28/PC3Proyecto10/issues/5) Verificacion calidad de Codigo Python
+- **User story**  
+    **As a** _desarrolador_  
+    **I need** _analizar automaticamente mi codigo Python en busca de errores y prblemas de estilo_  
+    **So that** _pueda asegurarme de que la base de codigo se mantenga limpia, legible y libre de erroes comunes_ 
+- **Responsable**: Germain Choquechambi
+- **Rama**: `feature/lint-hooks`
+- **Objetivo**: Para verificar la calidad del codigo usando `linters`
+
+### [#8](https://github.com/OliverHz28/PC3Proyecto10/issues/8) Validacion y control de calidad con hooks commit-msg y pre-push
+- **User story**  
+    **As a** _desarrollador_  
+    **I need** _que el hook commit-msg valide el formato del mensaje de commit y que el hook pre-push ejecute un script de linting antes de permitir un push_  
+    **So that** _se mantenga un mensaje de commits claro, y se garantice la calidad del codigo antes de subir cambios al repositorio remoto_
+- **Responsable**: Germain Choquechambi
+- **Rama**: `feature/hooks-testing`
+- **Objetivo**: Verificar el formato del commit y garantizar la calidad del codigo antes de subir cambios al repositorio remoto
+
+
+
+## Flujo de Trabajo
+Se utilizo la estrategia **Git Flow** para organizar el desarrollo:
+
+- **Ramas principales**:
+  - `main`: Contiene la version estable y lista para produccion.
+  - `develop`: Integra las funcionalidades completadas antes de pasar a `main`.
+
+- **Ramas de soporte**:
+  - `feature/*`: Cada nueva funcionalidad o issue se desarrolla en una rama `feature/nombre-issue` creada desde `develop`.
+  - `hotfix/*`: Para corregir errores críticos detectados en `main`.
+  - `release/*`: Preparacion de nuevas versiones antes de fusionar a `main`.
+
+## Ejecucion del Proyecto
+
+Para trabajar con el proyecto, realiza los pasos a continuacion.
+
+1. **Clonar el repositorio**
+    ```bash
+    git clone https://github.com/OliverHz28/PC3Proyecto10.git
+    cd PC3Proyecto10
+    ```
+
+2. **Crear y activar el entorno virtual**
+    ```bash
+    python3 -m venv pc3
+    source pc3/bin/activate
+    ```
+
+3. **Instalar dependencias**
+    ```bash
+    pip install -r requirements.txt
+    ```
+4. **Instalar herramientas de analisis**
+    
+    Instalar `shellcheck` para analizar scrips bash
+    ```bash
+    sudo apt update && sudo apt install shellcheck
+    ```
+
+    Instalar `tflint` para analizar el codigo terraform de la plataforma oficial
+    ```bash
+    curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
+    ```
+5. Copiar los `hooks` personalizados a la carpeta `.git/hooks`
+
+    ```bash
+    cp hooks/commit-msg .git/hooks/commit-msg
+    ```
+
+    ```bash
+    cp hooks/pre-push .git/hooks/
+    ```
+
+6. Dar permisos de ejecucion a los hooks y al script de linting
+    ```bash
+    chmod +x .git/hooks/commit-msg
+    ```
+
+    ```bash
+    chmod +x .git/hooks/pre-push
+    ```
+
+    ```bash
+    chmod +x lint_all.sh
+    ```
+
+4. **Ejecucion de `config_modifier.py`**
+      ```bash
+      python3 src/config_modifier.py
+      ```
+
+5. **Ejecucion de pruebas automatizadas**
+      ```bash
+      pytest
+      ```
+
+6. **Verificación de calidad de código**
+
+    Antes de realizar el push, puedes ejecutar manualmente el linter:
+      ```bash
+    ./scripts/lint_all.sh 
+      ```
+
+
-- 
2.43.0


From ab42efa2ab76bd51edff72c2e9d03f899fb08bf1 Mon Sep 17 00:00:00 2001
From: OliverHz28 <oliver_28z@hotmail.com>
Date: Mon, 16 Jun 2025 10:44:06 -0500
Subject: [PATCH 17/26] docs[#22]: README.md final con guias de uso completado

---
 README.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/README.md b/README.md
index 465af9b..2e08f95 100644
--- a/README.md
+++ b/README.md
@@ -191,7 +191,7 @@ Para trabajar con el proyecto, realiza los pasos a continuacion.
     ```
 
     ```bash
-    chmod +x lint_all.sh
+    chmod +x scripts/lint_all.sh 
     ```
 
 4. **Ejecucion de `config_modifier.py`**
-- 
2.43.0


From f9a277ee248a04bf25814682618cf739bcfcc9d9 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 09:38:06 -0500
Subject: [PATCH 18/26] refactor[#18]: mejorar pr_report.md y corregir nombre
 de la funcion changelog

---
 scripts/check_pr.py | 67 ++++++++++++++++++++++++---------------------
 1 file changed, 36 insertions(+), 31 deletions(-)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index 615a5ff..419d777 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -27,7 +27,7 @@ def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
 
 
 # Verifica que el archivo CHANGELOG.md contenga una seccion para el PR actual
-def verificiar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
+def verificar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
 
     archivo_changelog = "../CHANGELOG.md"
 
@@ -95,10 +95,10 @@ def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
     with open(ruta_report, "w", encoding="utf-8") as f:
         f.write("# Informe de Validacion\n\n")
         f.write("## Titulo\n")
-        f.write(f"{'OK' if titulo[0] else 'FAIL'}: {titulo[1]}\n\n")
+        f.write(f"{titulo[1]}\n\n")
 
         f.write("## Changelog\n")
-        f.write(f"{'OK' if changelog[0] else 'FAIL'}: {changelog[1]}\n\n")
+        f.write(f"{changelog[1]}\n\n")
 
         f.write("## Commits\n")
         if commits[0]:
@@ -118,31 +118,36 @@ def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
         f.write(f"```\n{tests[1]}\n```\n")
 
 
-ruta_base = "../pr_simulation"
-if not os.path.isdir(ruta_base):
-    print("No existe la carpeta pr_simulation")
-    sys.exit(1)
-# iteramos sobre cada carpeta de PR y lo valida
-for nombre_carpeta in sorted(os.listdir(ruta_base)):
-    ruta_pr = os.path.join(ruta_base, nombre_carpeta)
-    if not os.path.isdir(ruta_pr):
-        continue
-
-    print(f"\nValidando PR {nombre_carpeta}")
-
-    titulo = validar_titulo(ruta_pr)
-    changelog = verificiar_changelog(ruta_pr)
-    commits = validar_commits(ruta_pr)
-    lint = ejecutar_lint()
-    tests = ejecutar_tests()
-
-    generar_pr_repor(
-        os.path.join(ruta_pr, "pr_report.md"),
-        titulo,
-        changelog,
-        commits,
-        lint,
-        tests
-    )
-# indica donde se guardo el pr_report.md
-    print("pr_report.md generado en:", os.path.join(ruta_pr, "pr_report.md"))
+def main():
+    ruta_base = "../pr_simulation"
+    if not os.path.isdir(ruta_base):
+        print("No existe la carpeta pr_simulation")
+        sys.exit(1)
+    # iteramos sobre cada carpeta de PR y lo valida
+    for nombre_carpeta in sorted(os.listdir(ruta_base)):
+        ruta_pr = os.path.join(ruta_base, nombre_carpeta)
+        if not os.path.isdir(ruta_pr):
+            continue
+
+        print(f"\nValidando PR {nombre_carpeta}")
+
+        titulo = validar_titulo(ruta_pr)
+        changelog = verificar_changelog(ruta_pr)
+        commits = validar_commits(ruta_pr)
+        lint = ejecutar_lint()
+        tests = ejecutar_tests()
+
+        generar_pr_repor(
+            os.path.join(ruta_pr, "pr_report.md"),
+            titulo,
+            changelog,
+            commits,
+            lint,
+            tests
+        )
+    # indica donde se guardo el pr_report.md
+        print("pr_report.md generado en:", os.path.join(ruta_pr, "pr_report.md"))
+
+
+if __name__ == "__main__":
+    main()
-- 
2.43.0


From 8a73ee5fa0e39d56e27ec877c9f72b80fc984a55 Mon Sep 17 00:00:00 2001
From: GermainAN <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 11:16:55 -0500
Subject: [PATCH 19/26] feat[#24]: Automatizar validacion de PRs con
 check_pr.py (#25)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* feat[#15]: validar el titulo de la PR

* feat[#16]: verificar que CHANGELOG contenga seccion ## PR id

* feat[#17]: validar formato de commits en archivo commits.txt

* feat[#18]: Añadir funcion que ejecuta linters

* test[#18]: añadir funcion para ejecutar pruebas con pytest

* feat[#18]: generar reporte de validacion en pr_simulation/<id>/pr_report.md

* feat[#18]: generar reportes de validacion en pr_report.md y se documento las funciones

* refactor[#18]: mejorar pr_report.md y corregir nombre de la funcion changelog
---
 scripts/check_pr.py | 153 ++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 153 insertions(+)
 create mode 100644 scripts/check_pr.py

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
new file mode 100644
index 0000000..419d777
--- /dev/null
+++ b/scripts/check_pr.py
@@ -0,0 +1,153 @@
+import os
+import re
+import sys
+import subprocess
+from typing import Tuple, List
+
+
+# Valida el titulo del Pull Request verificando que el archivo correspondiente exista
+# y que cumpla con el patron esperado
+def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
+    pr_id = os.path.basename(carpeta_pr)
+    archivo_titulo = os.path.join(carpeta_pr, f"pr_{pr_id}_title.txt")
+
+    if not os.path.isfile(archivo_titulo):
+        return False, f"FAIL: Falta el archivo {archivo_titulo}"
+
+    titulo = open(archivo_titulo, encoding="utf-8").read().strip()
+
+    if not titulo:
+        return False, f"FAIL: El archivo {archivo_titulo} esta vacio"
+
+    patron = re.compile(r"^[A-Z]{2,5}-\d+: .+")
+    if patron.match(titulo):
+        return True, "OK"
+
+    return False, f"FAIL: '{titulo}' no cumple con el formato requerido"
+
+
+# Verifica que el archivo CHANGELOG.md contenga una seccion para el PR actual
+def verificar_changelog(carpeta_pr: str) -> Tuple[bool, str]:
+
+    archivo_changelog = "../CHANGELOG.md"
+
+    if not os.path.isfile(archivo_changelog):
+        return False, "FAIL: no existe CHANGELOG.md"
+
+    contenido = open(archivo_changelog, encoding="utf-8").read()
+    seccion_pr = f"## PR {os.path.basename(carpeta_pr)}"
+
+    if seccion_pr in contenido:
+        return True, "OK"
+
+    return False, f"FAIL: No se encontro la seccion '{seccion_pr}'"
+
+
+# Verifica que todos los commits en commits.txt sigan un patron
+def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
+    archivo_commits = os.path.join(carpeta_pr, "commits.txt")
+    if not os.path.isfile(archivo_commits):
+        return False, ["no existe el archivo commits.txt"]
+
+    incorrectos: List[str] = []
+    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore)\[#\d+\]: .+")
+
+    for fila, commit in enumerate(open(archivo_commits, encoding="utf-8"), 1):
+        if not patron.match(commit.strip()):
+            incorrectos.append(f"fila {fila}: '{commit.strip()}'")
+
+    return (len(incorrectos) == 0, incorrectos)
+
+
+# Ejecuta el script lint_all.sh para validar la calidad del codigo
+def ejecutar_lint() -> Tuple[bool, str]:
+    try:
+        resultado = subprocess.run(
+            ["bash", "lint_all.sh"],
+            capture_output=True,
+            text=True)
+        if resultado.returncode == 0:
+            return True, resultado.stdout.strip()
+        else:
+            return False, resultado.stderr.strip() or resultado.stdout.strip()
+    except FileNotFoundError:
+        return False, "no existe el script lint_all.sh"
+
+
+# ejecuta los tests usando pytest y devuelve el resultado
+def ejecutar_tests() -> Tuple[bool, str]:
+    try:
+        resultado = subprocess.run(
+            ["pytest", "--maxfail=1", "--disable-warnings", "-q"],
+            capture_output=True,
+            text=True
+        )
+        if resultado.returncode == 0:
+            return True, resultado.stdout.strip()
+        else:
+            return False, resultado.stdout.strip() + "\n" + resultado.stderr.strip()
+    except FileNotFoundError:
+        return False, "No se encontro pytest"
+
+
+# Genera el reporte de validacion del PR en formato Markdown
+def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
+    with open(ruta_report, "w", encoding="utf-8") as f:
+        f.write("# Informe de Validacion\n\n")
+        f.write("## Titulo\n")
+        f.write(f"{titulo[1]}\n\n")
+
+        f.write("## Changelog\n")
+        f.write(f"{changelog[1]}\n\n")
+
+        f.write("## Commits\n")
+        if commits[0]:
+            f.write("OK: Todos los commits son validos\n\n")
+        else:
+            f.write("FAIL: Commits con errores de formato:\n")
+            for error in commits[1]:
+                f.write(f"- {error}\n")
+            f.write("\n")
+
+        f.write("## Lint\n")
+        f.write(f"{'OK' if lint[0] else 'FAIL'}\n")
+        f.write(f"```\n{lint[1]}\n```\n\n")
+
+        f.write("## Tests\n")
+        f.write(f"{'OK' if tests[0] else 'FAIL'}\n")
+        f.write(f"```\n{tests[1]}\n```\n")
+
+
+def main():
+    ruta_base = "../pr_simulation"
+    if not os.path.isdir(ruta_base):
+        print("No existe la carpeta pr_simulation")
+        sys.exit(1)
+    # iteramos sobre cada carpeta de PR y lo valida
+    for nombre_carpeta in sorted(os.listdir(ruta_base)):
+        ruta_pr = os.path.join(ruta_base, nombre_carpeta)
+        if not os.path.isdir(ruta_pr):
+            continue
+
+        print(f"\nValidando PR {nombre_carpeta}")
+
+        titulo = validar_titulo(ruta_pr)
+        changelog = verificar_changelog(ruta_pr)
+        commits = validar_commits(ruta_pr)
+        lint = ejecutar_lint()
+        tests = ejecutar_tests()
+
+        generar_pr_repor(
+            os.path.join(ruta_pr, "pr_report.md"),
+            titulo,
+            changelog,
+            commits,
+            lint,
+            tests
+        )
+    # indica donde se guardo el pr_report.md
+        print("pr_report.md generado en:", os.path.join(ruta_pr, "pr_report.md"))
+
+
+if __name__ == "__main__":
+    main()
-- 
2.43.0


From 79dbd58398efc823b3b7641067fefe49815d4e0e Mon Sep 17 00:00:00 2001
From: Frank Hinojosa <124078849+OliverHz28@users.noreply.github.com>
Date: Tue, 17 Jun 2025 13:32:24 -0500
Subject: [PATCH 20/26] feat[#13]: merge feature/AUTO_INCR_VERSION a develop
 (#28)

* feat[#13]: agregar incrementar_build_numer en config_modifier.py

* feat[#13]: agregar test basico en tests/test_config_modifier.py

* feat[#13]: agregar tests basicos en tests/test_config_modifier.py
---
 src/config_modifier.py        | 25 ++++++++++++++++--
 tests/test_config_modifier.py | 50 ++++++++++++++++++++++++++++++++++-
 2 files changed, 72 insertions(+), 3 deletions(-)

diff --git a/src/config_modifier.py b/src/config_modifier.py
index 0d7dbf0..0021f28 100644
--- a/src/config_modifier.py
+++ b/src/config_modifier.py
@@ -37,13 +37,34 @@ def incrementar_version(file_path):
     return config["version"]
 
 
+def incrementar_build_number(file_path):
+    """
+    Incrementa el campo "build_number" del archivo JSON.
+    Si el campo no existe, lo crea con valor inicial 1.
+    """
+    config = leer_json(file_path)
+
+    if "build_number" not in config:
+        config["build_number"] = 0
+
+    if not isinstance(config['build_number'], (int, float)):
+        raise TypeError("El campo 'build_number' no es un número")
+
+    config["build_number"] += 1
+    with open(file_path, 'w', encoding='utf-8') as f:
+        json.dump(config, f, indent=4)
+    return config["build_number"]
+
+
 if __name__ == "__main__":
 
     file_path = "config.json"
     try:
         data = leer_json(file_path)
+        version = incrementar_version(file_path)
+        build = incrementar_build_number(file_path)
         print(f"Contenido del archivo '{file_path}': {data}")
-        nueva_version = incrementar_version(file_path)
-        print(f"Versión actualizada correctamente a: {nueva_version}")
+        print(f"Versión actualizada correctamente a: {version}")
+        print(f"Build number actualizado correctamente a: {build}")
     except Exception as e:
         print(f"Error: {e}")
diff --git a/tests/test_config_modifier.py b/tests/test_config_modifier.py
index c20fafb..9c905c7 100644
--- a/tests/test_config_modifier.py
+++ b/tests/test_config_modifier.py
@@ -2,7 +2,7 @@
 
 import pytest
 import json
-from src.config_modifier import leer_json, incrementar_version
+from src.config_modifier import leer_json, incrementar_version, incrementar_build_number
 
 
 @pytest.fixture
@@ -48,3 +48,51 @@ def test_incrementar_version_tipo_incorrecto(tmp_path):
         json.dump({"version": "uno"}, f)
     with pytest.raises(TypeError):
         incrementar_version(file_path)
+
+
+@pytest.fixture
+def json_con_build_number(tmp_path):
+    """Fixture para pruebas con build_number"""
+    file_path = tmp_path / "config_build.json"
+    data = {"version": 1.0, "build_number": 5, "name": "Proyecto 10"}
+    with open(file_path, 'w') as f:
+        json.dump(data, f)
+    return file_path
+
+
+def test_incrementar_build_number_existente(json_con_build_number):
+    """Prueba para incrementar build_number cuando ya existe"""
+    nuevo_build = incrementar_build_number(json_con_build_number)
+    assert nuevo_build == 6
+    with open(json_con_build_number) as f:
+        datos = json.load(f)
+    assert datos["build_number"] == 6
+    assert datos["version"] == 1.0
+
+
+@pytest.fixture
+def json_sin_build_number(tmp_path):
+    """Fixture para pruebas sin build_number"""
+    file_path = tmp_path / "config_sin_build.json"
+    data = {"version": 1.0, "name": "Test App"}
+    with open(file_path, 'w') as f:
+        json.dump(data, f)
+    return file_path
+
+
+def test_incrementar_build_number_nuevo(json_sin_build_number):
+    """Prueba incrementar build_number cuando no existe"""
+    nuevo_build = incrementar_build_number(json_sin_build_number)
+    assert nuevo_build == 1
+    with open(json_sin_build_number) as f:
+        datos = json.load(f)
+    assert datos["build_number"] == 1
+
+
+def test_incrementar_build_number_tipo_incorrecto(tmp_path):
+    """Prueba error cuando build_number no es un número"""
+    file_path = tmp_path / "build_invalido.json"
+    with open(file_path, 'w') as f:
+        json.dump({"build_number": "cinco"}, f)
+    with pytest.raises(TypeError):
+        incrementar_build_number(file_path)
-- 
2.43.0


From 676228c17e46c49f80e6e81ae100317d167fe882 Mon Sep 17 00:00:00 2001
From: GermainAN <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 15:04:33 -0500
Subject: [PATCH 21/26] test[#29]: agregar pruebas unitarias para check_pr.py
 (#30)

* test[#29]: crear test_check_pr.py y agregar test para titulo de PR con formato correcto

* test[#29]: agregar test para titulo de PR con formato incorrecto

* test[#29]: agregar test para verificar que CHANGELOG.md contenga la seccion del PR

* test[#29]: agregar prueba para changelog sin seccion del PR

* agregar test para verificar que los commits tengan el formato correcto

* test[#29]: agregar test para commits con errores de formato
---
 tests/test_check_pr.py | 110 +++++++++++++++++++++++++++++++++++++++++
 1 file changed, 110 insertions(+)
 create mode 100644 tests/test_check_pr.py

diff --git a/tests/test_check_pr.py b/tests/test_check_pr.py
new file mode 100644
index 0000000..878ffc9
--- /dev/null
+++ b/tests/test_check_pr.py
@@ -0,0 +1,110 @@
+import os
+import tempfile
+from scripts.check_pr import validar_titulo, verificar_changelog, validar_commits
+
+
+# Test para verificar que el titulo de PR tiene el formato correcto
+def test_titulo_valido():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        pr_id = "123"
+        carpeta_pr = os.path.join(temp_dir, pr_id)
+        os.makedirs(carpeta_pr)
+        archivo = os.path.join(carpeta_pr, f"pr_{pr_id}_title.txt")
+
+        with open(archivo, "w", encoding="utf-8") as f:
+            f.write("PROY-123: primer pull request")
+
+        ok, msg = validar_titulo(carpeta_pr)
+        assert ok is True
+
+
+# Test para verificar que el titulo de PR no tiene el formato correcto
+def test_titulo_mal_formato():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        pr_id = "124"
+        carpeta_pr = os.path.join(temp_dir, pr_id)
+        os.makedirs(carpeta_pr)
+        archivo = os.path.join(carpeta_pr, f"pr_{pr_id}_title.txt")
+
+        with open(archivo, "w", encoding="utf-8") as f:
+            f.write("PR que no tiene el formato correcto")  # Mal formato
+
+        ok, msg = validar_titulo(carpeta_pr)
+        assert ok is False
+
+
+# test para verificar que el archivo CHANGELOG.md contiene la seccion del PR actual
+def test_changelog_contiene_pr():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        pr_id = "125"
+        carpeta_pr = os.path.join(temp_dir, pr_id)
+        os.makedirs(carpeta_pr)
+
+        changelog_path = os.path.join(temp_dir, "CHANGELOG.md")
+        with open(changelog_path, "w", encoding="utf-8") as f:
+            f.write(f"# Cambios\n\n## PR {pr_id}\n- test PR\n")
+
+        carpeta_actual = os.getcwd()
+        os.chdir(os.path.join(temp_dir, pr_id))
+        try:
+            ok, _ = verificar_changelog(carpeta_pr)
+        finally:
+            os.chdir(carpeta_actual)
+
+        assert ok
+
+
+# test para verificar que el archivo CHANGELOG.md no contiene la seccion del PR actual
+def test_changelog_sin_seccion():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        pr_id = "126"
+        carpeta_pr = os.path.join(temp_dir, pr_id)
+        os.makedirs(carpeta_pr)
+
+        changelog_path = os.path.join(temp_dir, "CHANGELOG.md")
+        with open(changelog_path, "w", encoding="utf-8") as f:
+            f.write("# Cambios\n\n## PR 999\n- test PR\n")
+
+        carpeta_actual = os.getcwd()
+        os.chdir(carpeta_pr)
+        try:
+            ok, msg = verificar_changelog(carpeta_pr)
+        finally:
+            os.chdir(carpeta_actual)
+
+        assert ok is False
+
+
+# Test para verificar que los commits tienen el formato correcto
+def test_commits_todos_validos():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        carpeta_pr = os.path.join(temp_dir, "127")
+        os.makedirs(carpeta_pr)
+
+        commits = """feat[#123]: primer commit
+                    fix[#124]: segundo commit
+                    refactor[#125]: tercer commit"""
+        with open(os.path.join(carpeta_pr, "commits.txt"), "w", encoding="utf-8") as f:
+            f.write(commits)
+
+        ok, errores = validar_commits(carpeta_pr)
+        assert ok is True
+        assert errores == []
+
+# Test para verificar que los commits tienen errores de formato
+def test_commits_con_errores():
+    with tempfile.TemporaryDirectory() as temp_dir:
+        carpeta_pr = os.path.join(temp_dir, "128")
+        os.makedirs(carpeta_pr)
+
+        commits = """commit sin formato
+                    feat123: falta corchetes
+                    fix[#789]: commit correcto"""
+        with open(os.path.join(carpeta_pr, "commits.txt"), "w", encoding="utf-8") as f:
+            f.write(commits)
+
+        ok, errores = validar_commits(carpeta_pr)
+        assert ok is False
+        assert len(errores) == 2
+        assert "fila 1" in errores[0]
+        assert "fila 2" in errores[1]
-- 
2.43.0


From f3c64bec6a2f34f70730eafc1dfe932335ad05c7 Mon Sep 17 00:00:00 2001
From: Edy <166039525+EdySerrano@users.noreply.github.com>
Date: Tue, 17 Jun 2025 15:44:32 -0500
Subject: [PATCH 22/26] Feature/workflow pull request (#31)
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

* feat[#21]: añadir lint_all.sh y los test al workflow

* Aniadir bandit a requirements.txt

* Ajuste del lint_all.sh para leer *.sh

* Ajuste en linea 94 de test_check_pr.py

---------

Co-authored-by: Edy Serrano <edy.serran.a@uni.pe>
---
 .github/workflows/pr_validation.yaml | 38 ++++++++++++++++++----------
 requirements.txt                     |  3 ++-
 scripts/lint_all.sh                  |  4 +--
 tests/test_check_pr.py               |  1 +
 4 files changed, 30 insertions(+), 16 deletions(-)

diff --git a/.github/workflows/pr_validation.yaml b/.github/workflows/pr_validation.yaml
index 68f6206..5a2acd5 100644
--- a/.github/workflows/pr_validation.yaml
+++ b/.github/workflows/pr_validation.yaml
@@ -1,19 +1,31 @@
-name: PR Validation  
+name: PR Validation Pipeline
 
 on:
-  push:              
-  pull_request:     
+  pull_request:
+    branches: [ main, develop ]
 
 jobs:
-  placeholder:
-    runs-on: ubuntu-latest   
-
+  validate-pr:
+    runs-on: ubuntu-latest
     steps:
-      - name: Paso de ejemplo (Placeholder)  # el job placeholder es uno vacio
-        run: echo "Workflow placeholder"
+      - name: Checkout código
+        uses: actions/checkout@v3
+
+      - name: Configurar Python
+        uses: actions/setup-python@v4
+        with:
+          python-version: '3.9'
+
+      - name: Instalar dependencias
+        run: |
+          pip install pytest pytest-cov flake8 bandit
+          sudo apt-get update && sudo apt-get install -y shellcheck
+
+      - name: Ejecutar linting
+        run: |
+          chmod +x ./scripts/lint_all.sh
+          ./scripts/lint_all.sh
+
 
-      # Aqui se pueden agregar pasos siguientes, como:
-      # - Validacion de formato de codigo (linter)
-      # - Ejecucion de pruebas unitarias
-      # - Validacion de la construccion del proyecto (build)
-  
+      - name: Ejecutar pruebas
+        run: pytest --cov=src --cov=scripts --cov-fail-under=80
diff --git a/requirements.txt b/requirements.txt
index 036d8c5..811137a 100644
--- a/requirements.txt
+++ b/requirements.txt
@@ -1,2 +1,3 @@
 pytest
-flake8
\ No newline at end of file
+flake8
+bandit
\ No newline at end of file
diff --git a/scripts/lint_all.sh b/scripts/lint_all.sh
index 845f6ee..c97aaf9 100755
--- a/scripts/lint_all.sh
+++ b/scripts/lint_all.sh
@@ -14,7 +14,7 @@ fi
 
 echo "*********************"
 echo "Ejecutando shellcheck"
-if shellcheck scripts/* hooks/*; then 
+if shellcheck scripts/*.sh hooks/*; then 
   echo "No se encontraron errores con shellcheck"
 else
   echo "shellcheck encontro errores"
@@ -42,4 +42,4 @@ if [ $errores -eq 1 ]; then
 else
   echo "Todos los lint pasaron correctamente"
   exit 0
-fi
\ No newline at end of file
+fi
diff --git a/tests/test_check_pr.py b/tests/test_check_pr.py
index 878ffc9..815af12 100644
--- a/tests/test_check_pr.py
+++ b/tests/test_check_pr.py
@@ -91,6 +91,7 @@ def test_commits_todos_validos():
         assert ok is True
         assert errores == []
 
+
 # Test para verificar que los commits tienen errores de formato
 def test_commits_con_errores():
     with tempfile.TemporaryDirectory() as temp_dir:
-- 
2.43.0


From 8ad1c503cbcba970dfb1e45962351a772bd3d8b2 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 17:06:40 -0500
Subject: [PATCH 23/26] docs[#24]: crear CHANGELOG.md e incluir resumen de PRs
 del proyecto

---
 CHANGELOG.md | 37 +++++++++++++++++++++++++++++++++++++
 1 file changed, 37 insertions(+)
 create mode 100644 CHANGELOG.md

diff --git a/CHANGELOG.md b/CHANGELOG.md
new file mode 100644
index 0000000..dd4c9ad
--- /dev/null
+++ b/CHANGELOG.md
@@ -0,0 +1,37 @@
+## PR 29
+- Se agregaron pruebas unitarias para `check_pr.py`
+- Se anadieron validaciones para el titulo de la PR
+- Se agregaron tests para verificar la seccion correspondiente en `CHANGELOG.md`
+- Se anadieron pruebas para commits con formato incorrecto
+- Se genero cobertura de validaciones de commits
+
+## PR 13
+- Se implemento la funcionalidad de auto-incremento de version en `config_modifier.py`
+- Se agregaron pruebas basicas en `tests/test_config_modifier.py`
+
+## PR 21
+- Se anadio el script `lint_all.sh` para ejecutar linters
+- Se integraron los tests en el flujo de trabajo (workflow)
+
+## PR 24
+- Se automatizo la validacion de Pull Requests mediante el script `check_pr.py`
+- Se anadieron validaciones para titulos, commits y changelog
+- Se genero reporte de validacion en `pr_report.md`
+
+## PR 22
+- Se creo el tag `v1.0.0` y se realizo el merge de la rama release a `main`
+- Se agrego el archivo `pytest.ini` para configuracion de tests
+- Se actualizo el `README.md` con guias de uso
+- Se realizaron refactors en `config_modifier.py` y `lint_all.sh`
+
+## PR 3
+- Se integro la rama `feature/workflow` a `feature/develop`
+- Se incluyeron tareas relacionadas al flujo automatizado de validaciones
+
+## PR 2
+- Se hizo merge de `feature/test` y `feature/tests` a `feature/develop`
+- Se anadieron pruebas unitarias iniciales para archivos de configuracion
+
+## PR 4
+- Se hizo merge de `feature/config-modifier` a `feature/develop`
+- Se incorporo logica para modificar y validar archivos de configuracion
-- 
2.43.0


From 275dc69006f3d4ad59dd5ee128ee6473dee54847 Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 17:10:59 -0500
Subject: [PATCH 24/26] refactor[#24]: corregir la validacion del titulo y
 commit mediante regex

---
 scripts/check_pr.py | 6 +++---
 1 file changed, 3 insertions(+), 3 deletions(-)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index 419d777..46c5532 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -19,7 +19,7 @@ def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
     if not titulo:
         return False, f"FAIL: El archivo {archivo_titulo} esta vacio"
 
-    patron = re.compile(r"^[A-Z]{2,5}-\d+: .+")
+    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore|merge|)\[#\d+\]: .+")
     if patron.match(titulo):
         return True, "OK"
 
@@ -50,7 +50,7 @@ def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
         return False, ["no existe el archivo commits.txt"]
 
     incorrectos: List[str] = []
-    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore)\[#\d+\]: .+")
+    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore|merge)\[#\d+\]: .+")
 
     for fila, commit in enumerate(open(archivo_commits, encoding="utf-8"), 1):
         if not patron.match(commit.strip()):
@@ -102,7 +102,7 @@ def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
 
         f.write("## Commits\n")
         if commits[0]:
-            f.write("OK: Todos los commits son validos\n\n")
+            f.write("OK\n\n")
         else:
             f.write("FAIL: Commits con errores de formato:\n")
             for error in commits[1]:
-- 
2.43.0


From f7b0a5324fad8ec9b4c05bd24b33b0b848b7b0ea Mon Sep 17 00:00:00 2001
From: Germain <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 17:15:21 -0500
Subject: [PATCH 25/26] docs[#24]: agregar reportes de simulacion de PRs

---
 pr_simulation/13/commits.txt     | 3 +++
 pr_simulation/13/pr_13_title.txt | 1 +
 pr_simulation/2/commits.txt      | 5 +++++
 pr_simulation/2/pr_2_title.txt   | 1 +
 pr_simulation/22/commits.txt     | 8 ++++++++
 pr_simulation/22/pr_22_title.txt | 1 +
 pr_simulation/24/commits.txt     | 8 ++++++++
 pr_simulation/24/pr_24_title.txt | 1 +
 pr_simulation/29/commits.txt     | 6 ++++++
 pr_simulation/29/pr_29_title.txt | 1 +
 10 files changed, 35 insertions(+)
 create mode 100644 pr_simulation/13/commits.txt
 create mode 100644 pr_simulation/13/pr_13_title.txt
 create mode 100644 pr_simulation/2/commits.txt
 create mode 100644 pr_simulation/2/pr_2_title.txt
 create mode 100644 pr_simulation/22/commits.txt
 create mode 100644 pr_simulation/22/pr_22_title.txt
 create mode 100644 pr_simulation/24/commits.txt
 create mode 100644 pr_simulation/24/pr_24_title.txt
 create mode 100644 pr_simulation/29/commits.txt
 create mode 100644 pr_simulation/29/pr_29_title.txt

diff --git a/pr_simulation/13/commits.txt b/pr_simulation/13/commits.txt
new file mode 100644
index 0000000..85eb47c
--- /dev/null
+++ b/pr_simulation/13/commits.txt
@@ -0,0 +1,3 @@
+feat[#13]: agregar incrementar_build_numer en config_modifier.py
+feat[#13]: agregar test basico en tests/test_config_modifier.py
+feat[#13]: agregar tests basicos en tests/test_config_modifier.py
diff --git a/pr_simulation/13/pr_13_title.txt b/pr_simulation/13/pr_13_title.txt
new file mode 100644
index 0000000..5e76b72
--- /dev/null
+++ b/pr_simulation/13/pr_13_title.txt
@@ -0,0 +1 @@
+feat[#13]: merge feature/AUTO INCR VERSION a develop
\ No newline at end of file
diff --git a/pr_simulation/2/commits.txt b/pr_simulation/2/commits.txt
new file mode 100644
index 0000000..8c27f5b
--- /dev/null
+++ b/pr_simulation/2/commits.txt
@@ -0,0 +1,5 @@
+test[#2]: agregando test json_de_prueba en test_config_modifier.py
+test[#2]: agregando test test__leer_json_valido en test_config_modifi…
+test[#2]: agregando test test_incrementar_version en test_config_modi…
+test[#2]: agregando test test_leer_json_invalido en test_config_modif…
+test[#2]: agregando test test_incrementar_version_tipo_incorrecto en …
diff --git a/pr_simulation/2/pr_2_title.txt b/pr_simulation/2/pr_2_title.txt
new file mode 100644
index 0000000..7abecfa
--- /dev/null
+++ b/pr_simulation/2/pr_2_title.txt
@@ -0,0 +1 @@
+merge[#2]: feature/test a feature/develop
\ No newline at end of file
diff --git a/pr_simulation/22/commits.txt b/pr_simulation/22/commits.txt
new file mode 100644
index 0000000..abd46ab
--- /dev/null
+++ b/pr_simulation/22/commits.txt
@@ -0,0 +1,8 @@
+merge[#4]: feature/config-modifier a feature/develop (#6)
+merge[#2]: feature/test a feature/develop (#7)
+merge[#3]: feature/workflow a feature/develop (#9)
+merge[#8]: feature/lint-hook a feature/develop (#10)
+merge[#2]: feature/tests (#11)
+feat[#22]: agregar pytest.ini para la configuracion de tests
+refactor[#22]: corregir lint_all.sh
+docs[#22]: actualizar README con guias de uso completas
diff --git a/pr_simulation/22/pr_22_title.txt b/pr_simulation/22/pr_22_title.txt
new file mode 100644
index 0000000..cb5c8f2
--- /dev/null
+++ b/pr_simulation/22/pr_22_title.txt
@@ -0,0 +1 @@
+chore[#22]: tag v1.0.0 y merge release branch a main
\ No newline at end of file
diff --git a/pr_simulation/24/commits.txt b/pr_simulation/24/commits.txt
new file mode 100644
index 0000000..06eaea5
--- /dev/null
+++ b/pr_simulation/24/commits.txt
@@ -0,0 +1,8 @@
+feat[#15]: validar el titulo de la PR
+feat[#16]: verificar que CHANGELOG contenga seccion ## PR id
+feat[#17]: validar formato de commits en archivo commits.txt
+feat[#18]: Añadir funcion que ejecuta linters
+test[#18]: añadir funcion para ejecutar pruebas con pytest
+feat[#18]: generar reporte de validacion en pr_simulation/<id>/pr_rep…
+feat[#18]: generar reportes de validacion en pr_report.md y se docume…
+refactor[#18]: mejorar pr_report.md y corregir nombre de la funcion c…
diff --git a/pr_simulation/24/pr_24_title.txt b/pr_simulation/24/pr_24_title.txt
new file mode 100644
index 0000000..8aff609
--- /dev/null
+++ b/pr_simulation/24/pr_24_title.txt
@@ -0,0 +1 @@
+feat[#24]: Automatizar validacion de PRs con check_pr.py
\ No newline at end of file
diff --git a/pr_simulation/29/commits.txt b/pr_simulation/29/commits.txt
new file mode 100644
index 0000000..a04ab74
--- /dev/null
+++ b/pr_simulation/29/commits.txt
@@ -0,0 +1,6 @@
+test[#29]: crear test_check_pr.py y agregar test para titulo de PR co…
+test[#29]: agregar test para titulo de PR con formato incorrecto
+test[#29]: agregar test para verificar que CHANGELOG.md contenga la s…
+test[#29]: agregar prueba para changelog sin seccion del PR
+test[#29]: agregar test para verificar que los commits tengan el formato correcto
+test[#29]: agregar test para commits con errores de formato
diff --git a/pr_simulation/29/pr_29_title.txt b/pr_simulation/29/pr_29_title.txt
new file mode 100644
index 0000000..40ce1f7
--- /dev/null
+++ b/pr_simulation/29/pr_29_title.txt
@@ -0,0 +1 @@
+test[#29]: agregar pruebas unitarias para check_pr.py
\ No newline at end of file
-- 
2.43.0


From a4a6b88770095b76684e1ac97fdcb0a9893c94c6 Mon Sep 17 00:00:00 2001
From: GermainAN <germainchoquechambi5@gmail.com>
Date: Tue, 17 Jun 2025 19:11:34 -0500
Subject: [PATCH 26/26] merge[#24]: resolver conflictos check_pr.py

---
 scripts/check_pr.py | 19 ++++---------------
 1 file changed, 4 insertions(+), 15 deletions(-)

diff --git a/scripts/check_pr.py b/scripts/check_pr.py
index f1a1f35..8db6b44 100644
--- a/scripts/check_pr.py
+++ b/scripts/check_pr.py
@@ -18,12 +18,8 @@ def validar_titulo(carpeta_pr: str) -> Tuple[bool, str]:
 
     if not titulo:
         return False, f"FAIL: El archivo {archivo_titulo} esta vacio"
-
-<<<<<<< feature/validar-pr
-    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore|merge|)\[#\d+\]: .+")
-=======
-    patron = re.compile(r"^[A-Z]{2,5}-\d+: .+")
->>>>>>> develop
+    patron = re.compile(
+        r"^(feat|fix|docs|style|refactor|perf|test|chore|merge|)\[#\d+\]: .+")
     if patron.match(titulo):
         return True, "OK"
 
@@ -54,11 +50,8 @@ def validar_commits(carpeta_pr: str) -> Tuple[bool, List[str]]:
         return False, ["no existe el archivo commits.txt"]
 
     incorrectos: List[str] = []
-<<<<<<< feature/validar-pr
-    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore|merge)\[#\d+\]: .+")
-=======
-    patron = re.compile(r"^(feat|fix|docs|style|refactor|perf|test|chore)\[#\d+\]: .+")
->>>>>>> develop
+    patron = re.compile(
+        r"^(feat|fix|docs|style|refactor|perf|test|chore|merge)\[#\d+\]: .+")
 
     for fila, commit in enumerate(open(archivo_commits, encoding="utf-8"), 1):
         if not patron.match(commit.strip()):
@@ -110,11 +103,7 @@ def generar_pr_repor(ruta_report: str, titulo, changelog, commits, lint, tests):
 
         f.write("## Commits\n")
         if commits[0]:
-<<<<<<< feature/validar-pr
             f.write("OK\n\n")
-=======
-            f.write("OK: Todos los commits son validos\n\n")
->>>>>>> develop
         else:
             f.write("FAIL: Commits con errores de formato:\n")
             for error in commits[1]:
-- 
2.43.0

